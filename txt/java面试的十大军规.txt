NO 1.避免在程序中使用魔鬼数字，必须使用有意义的常量来标识 说明：是否是魔鬼数字要基于容易阅读和便于全局替换的原则。0、1作为某种专业领域物理量枚举数值时，必须定义常量，严禁出现类似NUMBER_ZERO的魔鬼常量。

NO 2.明确方法的功能，一个方法仅完成一个功能
说明：方法功能太多，会增加方法的复杂度和依赖关系，不利于程序阅读和将来的持续维护，无论是方法还是类设计都应符合单一职责原则。

NO 3.方法参数不超过5个
说明：参数太多影响代码阅读和使用，为减少参数，首先要考虑这些参数的合理性，保持方法功能单一，优化方法设计，如果参数确实无法减少，可以将多个参数封装成一个类(对象)，同时考虑在新的类(对象)中增加相应的行为，使其更符合OOP

NO 4.方法调用尽量不要返回null，取而代之以抛出异常，或者返回特例对象(SPECIAL CASE Object，SPECIAL CASE PATTERN)，对于以集合或数组类作为返回值的方法，取而代之以空集合或0长度数组
说明：返回null会增加不必要的空指针判断，遗漏判断也会导致严重的NullPointer Exception错误

NO 5. 在进行数据库操作或IO操作时，必须确保资源在使用完毕后得到释放，并且必须确保释放操作在finally中进行
说明：数据库操作、IO操作等需要关闭对象必须在try…catch…finally的finanlly中close()，如果有多个IO对象需要关闭，需要分别对每个对象的close()方法进行try…catch，防止一个IO对象关闭失败其他IO对象都未关闭

NO 6. 异常捕获不要直接catch(Exception e)，应该把异常细分处理 说明：catch(Exception e)的结果会把Runtime Exception异常捕获，Runtime Exception是运行期异常，是程序本身考虑不周而抛出的异常，是程序的BUG，如无效参数、数据下标越界，程序必须确保不能抛出Runtime Exception异常，不允许显示捕获Runtime Exception是为了方便测试中容易发现程序问题

NO 7. 对于if…else if(后续可能有多个else if…)这种类型的条件判断，最后必须包含一个else分支，避免出现分支遗漏造成错误，每个switch…case语句都必须保障等有default，避免出现分支遗漏，造成错误

NO 8.覆写对象的equals()方法时必须同时覆写hashCode()方法 说明：equals和hashCode方法是对象在hash容器内高效工作的基础，正确地覆写这两个方法才能保证在hash容器内查找对象的正确性，同时一个好的hashCode方法能大幅提升hash容器的效率

NO 9.禁止循环中创建新线程，尽量使用线程池
说明：包括变量，文件对象，数据库连接等重复使用且不会变化的资源，都是避免在循环体内重复创建和初始化的，因为会造成CPU资源的浪费除非业务需要，应避免在循环中构造try…catch块，因为每次进入、退出try…catch都会消耗一定的CPU资源

NO10.在进行精确计算时(如货币计算)，避免使用float和double，浮点计算不精确，必须使用BigDecimal或将浮点数运算转换为整形计算


